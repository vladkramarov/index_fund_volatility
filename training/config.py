
NUM_WORKERS = 10
MAX_ENCODER_LENGTH = 63
MAX_PREDICTION_LENGTH = 10
BATCH_SIZE = 64
VAL_BATCH_SIZE = 256
LEARNING_RATE =  0.0000069843 #3.45717E-06
HIDDEN_SIZE = 36 #48
QUANTILES = [0.1, 0.5, 0.9]
HIDDEN_CONTINUOUS_SIZE = 29 #44 
ATTENTION_HEADS = 3 #5 #4

GRADIENT_CLIP_VAL = 0.1975899 #0.055219 #0.0144732981072584084 #0.03638392866477776 #
DROPOUT = 0.199286#0.27335

VALIDATION_DATA_LENGTH = 252
TEST_DATA_LENGTH = 252

VOLATILITY_WINDOW = 5


# COLUMNS FOR TIMESERIESDATASET
GROUP_IDS=["ticker"]
TARGET = 'volatility_target'
STATIC_CATEGORICALS=["ticker"]
TIME_VARYING_KNOWN_CATEGORICALS= ["day_of_the_week", "month", 'earnings_date', 'cpi_report']
TIME_VARYING_UNKNOWN_CATEGORICALS = ['positive_or_negative']
TIME_VARYING_KNOWN_REALS = ['idx']
TIME_VARYING_UNKNOWN_REALS=['log_returns_absolute', "prev_day_range", "volume", 'historical_volatility']


LAST_TEST_DATASET_DATE = '2023-07-20'
LAST_TEST_IDX = 4756


# os.environ['PYTORCH_ENABLE_MPS_FALLBACK'] = '1'
# mps_fallback_enabled = os.environ.get('PYTORCH_ENABLE_MPS_FALLBACK', '0') == '1'
# print(f"Is MPS fallback enabled? {mps_fallback_enabled}")

